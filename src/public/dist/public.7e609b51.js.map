{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,WAC1C,IAAM,EAAM,SAAS,cAAc,CAAC,aAwEpC,SAAS,EAA0B,CAAO,EACtC,IAAM,EAAiB,IAAI,MAS3B,GARA,EAAe,GAAG,CAAG,EACrB,EAAe,EAAE,CAAG,YACpB,EAAe,GAAG,CAAG,kBACrB,EAAe,SAAS,CAAC,GAAG,CAAC,aAE7B,EAAI,UAAU,CAAC,YAAY,CAAC,EAAgB,GAGxC,CAAC,SAAS,aAAa,CAAC,yBAA0B,CAClD,IAAM,EAAQ,SAAS,aAAa,CAAC,QACrC,CAAA,EAAM,SAAS,CAAG,kBAClB,EAAM,WAAW,CAAG;A;A;A;A;A;AAMpB,YAAA,CAAC,CACD,SAAS,IAAI,CAAC,WAAW,CAAC,EAC9B,CACJ,CA5FA,EAAI,MAAM,CAAG,WAET,IAAM,EAAc,aAAa,OAAO,CAAC,qBACzC,GAAI,EAAa,CACb,EAA0B,GAC1B,MACJ,CAGA,IAAM,EAAS,SAAS,aAAa,CAAC,UAChC,EAAM,EAAO,UAAU,CAAC,KAG9B,CAAA,EAAO,KAAK,CAAG,EAAI,YAAY,CAC/B,EAAO,MAAM,CAAG,EAAI,aAAa,CAEjC,EAAI,SAAS,CAAC,EAAK,EAAG,GAGtB,IAAM,EAAO,AADK,EAAI,YAAY,CAAC,EAAG,EAAG,EAAO,KAAK,CAAE,EAAO,MAAM,EAC7C,IAAI,CAErB,EAAqB,EAAI,eAAe,CAAC,EAAO,KAAK,CAAE,EAAO,MAAM,EACpE,EAAgB,EAAmB,IAAI,CAE7C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,GAbjB,EAcd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,KAAK,CAAE,GAdpB,EAcoC,CAC9C,IAAM,EAAU,KAAK,GAAG,CAAC,EAAI,KAAK,KAAK,CAAC,KAAgB,EAAO,KAAK,CAAG,GAEjE,EAAc,AAAC,CAAA,AADL,KAAK,GAAG,CAAC,EAAI,KAAK,KAAK,CAAC,KAAgB,EAAO,MAAM,CAAG,GACzC,EAAO,KAAK,CAAG,CAAA,EAAW,EAEnD,EAAI,CAAI,CAAC,EAAY,CACrB,EAAI,CAAI,CAAC,EAAc,EAAE,CACzB,EAAI,CAAI,CAAC,EAAc,EAAE,CACzB,EAAI,CAAI,CAAC,EAAc,EAAE,CAGzB,EAAa,AAAC,CAAA,EAAI,EAAI,CAAA,EAAK,EAC3B,EAAY,EAFA,IAEiB,EAAa,IAEhD,IAAK,IAAI,EAAK,EAAG,EA5BP,GA4ByB,EAAI,EAAK,EAAO,MAAM,CAAE,IACvD,IAAK,IAAI,EAAK,EAAG,EA7BX,GA6B6B,EAAI,EAAK,EAAO,KAAK,CAAE,IAAM,CAC5D,IAAM,EAAQ,AAAC,CAAA,AAAC,CAAA,EAAI,CAAA,EAAM,EAAO,KAAK,CAAI,CAAA,EAAI,CAAA,CAAC,EAAM,EAEjD,GACA,CAAa,CAAC,EAAM,CAAG,EACvB,CAAa,CAAC,EAAQ,EAAE,CAAG,EAC3B,CAAa,CAAC,EAAQ,EAAE,CAAG,EAC3B,CAAa,CAAC,EAAQ,EAAE,CAAG,MAE3B,CAAa,CAAC,EAAM,CAAG,EACvB,CAAa,CAAC,EAAQ,EAAE,CAAG,EAC3B,CAAa,CAAC,EAAQ,EAAE,CAAG,EAC3B,CAAa,CAAC,EAAQ,EAAE,CAAG,EAEnC,CAER,CAGJ,EAAI,YAAY,CAAC,EAAoB,EAAG,GAGxC,IAAM,EAAU,EAAO,SAAS,GAChC,aAAa,OAAO,CAAC,oBAAqB,GAG1C,EAA0B,EAC9B,EA2BI,EAAI,QAAQ,EACZ,EAAI,MAAM,EAElB","sources":["<anon>","src/public/js/8-bit.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    const img = document.getElementById('world-map');\n    img.onload = function() {\n        // Check if we have a cached version\n        const cachedImage = localStorage.getItem('pixelatedWorldMap');\n        if (cachedImage) {\n            replaceWithPixelatedImage(cachedImage);\n            return;\n        }\n        // If no cached version, process the image\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const pixelSize = 7;\n        canvas.width = img.naturalWidth;\n        canvas.height = img.naturalHeight;\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        const pixelatedImageData = ctx.createImageData(canvas.width, canvas.height);\n        const pixelatedData = pixelatedImageData.data;\n        for(let y = 0; y < canvas.height; y += pixelSize)for(let x = 0; x < canvas.width; x += pixelSize){\n            const sampleX = Math.min(x + Math.floor(pixelSize / 2), canvas.width - 1);\n            const sampleY = Math.min(y + Math.floor(pixelSize / 2), canvas.height - 1);\n            const sampleIndex = (sampleY * canvas.width + sampleX) * 4;\n            const r = data[sampleIndex];\n            const g = data[sampleIndex + 1];\n            const b = data[sampleIndex + 2];\n            const a = data[sampleIndex + 3];\n            const threshold = 50;\n            const brightness = (r + g + b) / 3;\n            const isVisible = a > threshold && brightness < 240;\n            for(let py = 0; py < pixelSize && y + py < canvas.height; py++)for(let px = 0; px < pixelSize && x + px < canvas.width; px++){\n                const index = ((y + py) * canvas.width + (x + px)) * 4;\n                if (isVisible) {\n                    pixelatedData[index] = r;\n                    pixelatedData[index + 1] = g;\n                    pixelatedData[index + 2] = b;\n                    pixelatedData[index + 3] = 255;\n                } else {\n                    pixelatedData[index] = 0;\n                    pixelatedData[index + 1] = 0;\n                    pixelatedData[index + 2] = 0;\n                    pixelatedData[index + 3] = 0;\n                }\n            }\n        }\n        ctx.putImageData(pixelatedImageData, 0, 0);\n        // Cache the processed image\n        const dataUrl = canvas.toDataURL();\n        localStorage.setItem('pixelatedWorldMap', dataUrl);\n        // Replace the image\n        replaceWithPixelatedImage(dataUrl);\n    };\n    // Helper function to replace the original image\n    function replaceWithPixelatedImage(dataUrl) {\n        const pixelatedImage = new Image();\n        pixelatedImage.src = dataUrl;\n        pixelatedImage.id = 'world-map';\n        pixelatedImage.alt = '8-bit world map';\n        pixelatedImage.classList.add('pixelated');\n        img.parentNode.replaceChild(pixelatedImage, img);\n        // Add pixelated styling if not already present\n        if (!document.querySelector('style.pixelated-style')) {\n            const style = document.createElement('style');\n            style.className = 'pixelated-style';\n            style.textContent = `\n                .pixelated {\n                    image-rendering: pixelated;\n                    image-rendering: -moz-crisp-edges;\n                    image-rendering: crisp-edges;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n    if (img.complete) img.onload();\n});\n\n//# sourceMappingURL=public.7e609b51.js.map\n","document.addEventListener('DOMContentLoaded', function() {\r\n    const img = document.getElementById('world-map');\r\n    \r\n    img.onload = function() {\r\n        // Check if we have a cached version\r\n        const cachedImage = localStorage.getItem('pixelatedWorldMap');\r\n        if (cachedImage) {\r\n            replaceWithPixelatedImage(cachedImage);\r\n            return;\r\n        }\r\n\r\n        // If no cached version, process the image\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const pixelSize = 7;\r\n        \r\n        canvas.width = img.naturalWidth;\r\n        canvas.height = img.naturalHeight;\r\n        \r\n        ctx.drawImage(img, 0, 0);\r\n        \r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n        \r\n        const pixelatedImageData = ctx.createImageData(canvas.width, canvas.height);\r\n        const pixelatedData = pixelatedImageData.data;\r\n        \r\n        for (let y = 0; y < canvas.height; y += pixelSize) {\r\n            for (let x = 0; x < canvas.width; x += pixelSize) {\r\n                const sampleX = Math.min(x + Math.floor(pixelSize / 2), canvas.width - 1);\r\n                const sampleY = Math.min(y + Math.floor(pixelSize / 2), canvas.height - 1);\r\n                const sampleIndex = (sampleY * canvas.width + sampleX) * 4;\r\n                \r\n                const r = data[sampleIndex];\r\n                const g = data[sampleIndex + 1];\r\n                const b = data[sampleIndex + 2];\r\n                const a = data[sampleIndex + 3];\r\n                \r\n                const threshold = 50;\r\n                const brightness = (r + g + b) / 3;\r\n                const isVisible = a > threshold && brightness < 240;\r\n                \r\n                for (let py = 0; py < pixelSize && y + py < canvas.height; py++) {\r\n                    for (let px = 0; px < pixelSize && x + px < canvas.width; px++) {\r\n                        const index = ((y + py) * canvas.width + (x + px)) * 4;\r\n                        \r\n                        if (isVisible) {\r\n                            pixelatedData[index] = r;\r\n                            pixelatedData[index + 1] = g;\r\n                            pixelatedData[index + 2] = b;\r\n                            pixelatedData[index + 3] = 255;\r\n                        } else {\r\n                            pixelatedData[index] = 0;\r\n                            pixelatedData[index + 1] = 0;\r\n                            pixelatedData[index + 2] = 0;\r\n                            pixelatedData[index + 3] = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        ctx.putImageData(pixelatedImageData, 0, 0);\r\n        \r\n        // Cache the processed image\r\n        const dataUrl = canvas.toDataURL();\r\n        localStorage.setItem('pixelatedWorldMap', dataUrl);\r\n        \r\n        // Replace the image\r\n        replaceWithPixelatedImage(dataUrl);\r\n    };\r\n    \r\n    // Helper function to replace the original image\r\n    function replaceWithPixelatedImage(dataUrl) {\r\n        const pixelatedImage = new Image();\r\n        pixelatedImage.src = dataUrl;\r\n        pixelatedImage.id = 'world-map';\r\n        pixelatedImage.alt = '8-bit world map';\r\n        pixelatedImage.classList.add('pixelated');\r\n        \r\n        img.parentNode.replaceChild(pixelatedImage, img);\r\n        \r\n        // Add pixelated styling if not already present\r\n        if (!document.querySelector('style.pixelated-style')) {\r\n            const style = document.createElement('style');\r\n            style.className = 'pixelated-style';\r\n            style.textContent = `\r\n                .pixelated {\r\n                    image-rendering: pixelated;\r\n                    image-rendering: -moz-crisp-edges;\r\n                    image-rendering: crisp-edges;\r\n                }\r\n            `;\r\n            document.head.appendChild(style);\r\n        }\r\n    }\r\n    \r\n    if (img.complete) {\r\n        img.onload();\r\n    }\r\n});\r\n"],"names":["document","addEventListener","img","getElementById","replaceWithPixelatedImage","dataUrl","pixelatedImage","Image","src","id","alt","classList","add","parentNode","replaceChild","querySelector","style","createElement","className","textContent","head","appendChild","onload","cachedImage","localStorage","getItem","canvas","ctx","getContext","width","naturalWidth","height","naturalHeight","drawImage","data","imageData","getImageData","pixelatedImageData","createImageData","pixelatedData","y","x","sampleX","Math","min","floor","pixelSize","sampleIndex","sampleY","r","g","b","a","brightness","isVisible","py","px","index","putImageData","toDataURL","setItem","complete"],"version":3,"file":"public.7e609b51.js.map"}